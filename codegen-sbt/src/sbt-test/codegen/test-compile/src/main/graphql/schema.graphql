directive @lazy on FIELD_DEFINITION
directive @oneOf on INPUT_OBJECT

# Schema
schema {
    query: Q
}

# Query
type Q {
    # nested object type
    characters: [Character!]!
    # nested object type with argument
    character(name: String!): Character
    # oneOf input object
    character2(oneOfThese: CharacterOneOfInput!): Character

    # default arguments for optional and list arguments
    characters2(
        first: Int!
        last: Int
        origins: [String]!
    ): String

    testJson: Json!

    # test for scala.Option / Option conflicts
    defaultOptionForProductId(id: String!): Option
    availableOptionsForProductId(id: String!): [Option!]

    # nested @lazy fields
    cant: Canterbury!
}

# Input object
input CharacterInput {
    name: String!
    nicknames: [String!]!
    nicknames2: [String]!
    nicknames3: [String!]
    nicknames4: [String]

    # reserved name
    wait: String!
}

# Input object
input CharacterOneOfInput @oneOf {
    name: String
    nickname: String
    origin: Origin

    # reserved name
    wait: String
}

# Object
type Character {
    name: String!
    nicknames: [String!]!

    # reserved name
    type: String!

    # enum
    origin: Origin

    # union
    role: Role

    # Deprecated field + comment
    oldName: String! @deprecated(reason: "blah")
    oldNicknames: [String!]! @deprecated
    # Deprecated field + comment newline
    oldName2: String! @deprecated(reason: "foo\nbar")
    # Deprecated field + comment with double quotes and newlines
    """a deprecated field"""
    oldName3: String!
    @deprecated(reason: """
    This field is deprecated for the following reasons:
    1. "Outdated data model": The field relies on an outdated data model.
    2. "Performance issues": Queries using this field have performance issues.
    Please use `name` instead.
    """)
}

# Enum
enum Origin {
    EARTH
    MARS
    BELT
}

# Regression test for a conflict with SelectionBuilder.Field (#917)
enum Field {
    name
    nicknames
    origin
}

# Union
union Role = Captain | Pilot
type Captain {
    shipName: String!
}
type Pilot {
    shipName: String!
}

# Json
scalar Json

# A type that could conflict with scala.Option
type Option {
    defaultColor: String!
}
type Product {
    id: String
    defaultOption: Option!
    configuredOption: Option
    availableOptions: [Option!]!
    specialOrderOption: [Option]
}

type Canterbury {
    officer: Officer!
}

type Officer {
    dossier: Dossier! @lazy
}

type Dossier {
    homeWorld: String!
    faction: String! @lazy
}

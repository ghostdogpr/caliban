(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"getting-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[a._v("#")]),a._v(" Getting Started")]),a._v(" "),s("p",[s("strong",[a._v("Caliban")]),a._v(" is a purely functional library for creating GraphQL backends in Scala.\nIt relies on "),s("a",{attrs:{href:"https://github.com/propensive/magnolia",target:"_blank",rel:"noopener noreferrer"}},[a._v("Magnolia"),s("OutboundLink")],1),a._v(" to automatically derives GraphQL schemas from your data types, "),s("a",{attrs:{href:"https://github.com/lihaoyi/fastparse",target:"_blank",rel:"noopener noreferrer"}},[a._v("Fastparse"),s("OutboundLink")],1),a._v(" to parse queries and "),s("a",{attrs:{href:"https://github.com/zio/zio",target:"_blank",rel:"noopener noreferrer"}},[a._v("ZIO"),s("OutboundLink")],1),a._v(" to handle various effects.")]),a._v(" "),s("p",[a._v("The design principles behind the library are the following:")]),a._v(" "),s("ul",[s("li",[a._v("pure interface: errors and effects are returned explicitly (no exceptions thrown), all returned types are referentially transparent (no "),s("code",[a._v("Future")]),a._v(").")]),a._v(" "),s("li",[a._v("clean separation between schema definition and implementation: schema is defined and validated at compile-time (no reflection) using Scala standard types, resolver is a simple value provided at runtime.")]),a._v(" "),s("li",[a._v("minimal amount of boilerplate: no need to manually define a schema for every type in your API.")])]),a._v(" "),s("h2",{attrs:{id:"dependencies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[a._v("#")]),a._v(" Dependencies")]),a._v(" "),s("p",[a._v("To use "),s("code",[a._v("caliban")]),a._v(", add the following line in your "),s("code",[a._v("build.sbt")]),a._v(" file:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('libraryDependencies += "com.github.ghostdogpr" %% "caliban" % "0.5.2"\n')])])]),s("p",[a._v("The following modules are optional:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('libraryDependencies += "com.github.ghostdogpr" %% "caliban-http4s"    % "0.5.2" // routes for http4s\nlibraryDependencies += "com.github.ghostdogpr" %% "caliban-akka-http" % "0.5.2" // routes for akka-http\nlibraryDependencies += "com.github.ghostdogpr" %% "caliban-cats"      % "0.5.2" // interop with cats effect\nlibraryDependencies += "com.github.ghostdogpr" %% "caliban-monix"     % "0.5.2" // interop with monix\n')])])]),s("p",[a._v("Note that Caliban is also available for ScalaJS.")]),a._v(" "),s("h2",{attrs:{id:"a-simple-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-simple-example"}},[a._v("#")]),a._v(" A simple example")]),a._v(" "),s("p",[a._v("Creating a GraphQL API with Caliban is as simple as creating a case class. Indeed, the whole GraphQL schema will be derived from a case class structure (its fields and the other types it references), and the resolver is just an instance of that case class.")]),a._v(" "),s("p",[a._v("Let's say we have a class "),s("code",[a._v("Character")]),a._v(" and 2 functions: "),s("code",[a._v("getCharacters")]),a._v(" and "),s("code",[a._v("getCharacter")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" getCharacters"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" getCharacter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n")])])]),s("p",[a._v("Let's create a case class named "),s("code",[a._v("Queries")]),a._v(" that will represent our API, with 2 fields named and modeled after the functions we want to expose (a "),s("em",[a._v("record of functions")]),a._v("). We then create a value of this class that calls our actual functions. This is our resolver.")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// schema")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" CharacterName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Queries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("characters"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n                   character"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" CharacterName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("=>")]),a._v(" Option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// resolver")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" queries "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Queries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("getCharacters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" args "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("=>")]),a._v(" getCharacter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("The next step is creating our GraphQL API definition. First, we wrap our query resolver inside a "),s("code",[a._v("RootResolver")]),a._v(", the root object that contains queries, mutations and subscriptions. Only queries are mandatory.\nThen we can call the "),s("code",[a._v("graphQL")]),a._v(" function which will turn our simple resolver value into a GraphQL API definition.\nThe whole schema will be derived at compile time, meaning that if it compiles, it will be able to serve it.")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" caliban"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("GraphQL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("graphQL\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" caliban"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("RootResolver\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" api "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" graphQL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RootResolver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("queries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("You can use "),s("code",[a._v("api.render")]),a._v(" to visualize the schema generated, in this case:")]),a._v(" "),s("div",{staticClass:"language-graphql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-graphql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Queries")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("characters")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Character"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("character")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Character\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("In order to process requests, you need to turn your API into an interpreter, which can be done easily by calling "),s("code",[a._v(".interpreter")]),a._v(".\nAn interpreter is a light wrapper around the API definition that allows plugging in some middleware and possibly modifying the environment and error types (see "),s("RouterLink",{attrs:{to:"/docs/middleware.html"}},[a._v("Middleware")]),a._v(" for more info).")],1),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" interpreter "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("interpreter\n")])])]),s("p",[a._v("Now you can call "),s("code",[a._v("interpreter.execute")]),a._v(" with a given GraphQL query, and you will get an "),s("code",[a._v("ZIO[R, Nothing, GraphQLResponse[CalibanError]]")]),a._v(" as a response, with "),s("code",[a._v("GraphQLResponse")]),a._v(" defined as follows:")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" GraphQLResponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("E"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" ResponseValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" errors"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("E"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Use "),s("code",[a._v("ResponseValue#toString")]),a._v(" to get the JSON representation of the result.")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[a._v('"""\n  {\n    characters {\n      name\n    }\n  }"""')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  result "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("<-")]),a._v(" interpreter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  _      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("<-")]),a._v(" zio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("putStrLn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("toString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("yield")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("A "),s("code",[a._v("CalibanError")]),a._v(" can be:")]),a._v(" "),s("ul",[s("li",[a._v("a "),s("code",[a._v("ParsingError")]),a._v(": the query has invalid syntax")]),a._v(" "),s("li",[a._v("a "),s("code",[a._v("ValidationError")]),a._v(": the query was parsed but does not match the schema")]),a._v(" "),s("li",[a._v("an "),s("code",[a._v("ExecutionError")]),a._v(": an error happened while executing the query")])]),a._v(" "),s("p",[a._v("Caliban itself is not tied to any web framework, you are free to expose this function using the protocol and library of your choice. The "),s("a",{attrs:{href:"https://github.com/ghostdogpr/caliban/tree/master/http4s",target:"_blank",rel:"noopener noreferrer"}},[a._v("caliban-http4s"),s("OutboundLink")],1),a._v(" module provides an "),s("code",[a._v("Http4sAdapter")]),a._v(" that exposes an interpreter over HTTP and WebSocket using http4s. There is also a "),s("a",{attrs:{href:"https://github.com/ghostdogpr/caliban/tree/master/akka-http",target:"_blank",rel:"noopener noreferrer"}},[a._v("caliban-akka-http"),s("OutboundLink")],1),a._v(" that provides similar functionality for Akka HTTP.")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("Combining GraphQL APIs")]),a._v(" "),s("p",[a._v("You don't have to define all your root fields into a single case class: you can use smaller case classes and combine "),s("code",[a._v("GraphQL")]),a._v(" objects using the "),s("code",[a._v("|+|")]),a._v(" operator.")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" api1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" graphQL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" api2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" graphQL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" api "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" api1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" api2\n")])])]),s("p",[a._v("You can use "),s("code",[a._v(".rename")]),a._v(" to change the names of the generated root types.")])]),a._v(" "),s("h2",{attrs:{id:"mutations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutations"}},[a._v("#")]),a._v(" Mutations")]),a._v(" "),s("p",[a._v("Creating mutations is the same as queries, except you pass them as the second argument to "),s("code",[a._v("RootResolver")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" CharacterArgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Mutations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("deleteCharacter"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" CharacterArgs "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("=>")]),a._v(" Task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" mutations "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Mutations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" api "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" graphQL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RootResolver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("queries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" mutations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"subscriptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subscriptions"}},[a._v("#")]),a._v(" Subscriptions")]),a._v(" "),s("p",[a._v("Similarly, subscriptions are passed as the third argument to "),s("code",[a._v("RootResolver")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Subscriptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("deletedCharacter"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" ZStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Nothing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" Character"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" subscriptions "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Subscriptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" api "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" graphQL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("RootResolver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("queries"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" mutations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" subscriptions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("All the fields of the subscription root case class MUST return "),s("code",[a._v("ZStream")]),a._v(" or "),s("code",[a._v("? => ZStream")]),a._v(" objects. When a subscription request is received, an output stream of "),s("code",[a._v("ResponseValue")]),a._v(" (a "),s("code",[a._v("StreamValue")]),a._v(") will be returned wrapped inside an "),s("code",[a._v("ObjectValue")]),a._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);
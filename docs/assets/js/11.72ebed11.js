(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{433:function(e,a,t){"use strict";t.r(a);var n=t(65),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"code-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#code-generation"}},[e._v("#")]),e._v(" Code Generation")]),e._v(" "),t("p",[e._v("Caliban provides two sbt plugins to generate your client(s) code.")]),e._v(" "),t("p",[e._v("The first one, named "),t("code",[e._v("CalibanPlugin")]),e._v(", allows you to generate the client code from a schema file or from a server URL, manually or automatically.")]),e._v(" "),t("p",[e._v("The second one, named "),t("code",[e._v("CompileTimeCalibanPlugin")]),e._v(', allows you to generate the client code from your server code.\nThis second "meta" plugin is actually made of two "concrete" plugins, '),t("code",[e._v("CompileTimeCalibanServerPlugin")]),e._v(" and "),t("code",[e._v("CompileTimeCalibanClientPlugin")]),e._v(", that you'll\nboth need to configure in your project to be able to generate you Caliban client code from your Caliban server code.")]),e._v(" "),t("p",[e._v("To use any of these two plugins, you'll first need to add following dependency to your "),t("code",[e._v("project/plugins.sbt")]),e._v(" file:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[e._v("addSbtPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.github.ghostdogpr"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"caliban-codegen-sbt"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.4.1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h2",{attrs:{id:"calibanplugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#calibanplugin"}},[e._v("#")]),e._v(" CalibanPlugin")]),e._v(" "),t("p",[e._v("The first step for building GraphQL queries with "),t("code",[e._v("caliban-client")]),e._v(" is to generate boilerplate code from a GraphQL schema. For that, you need a file containing your schema (if your backend uses "),t("code",[e._v("caliban")]),e._v(", you can get it by calling "),t("code",[e._v("GraphQL#render")]),e._v(" on your API).")]),e._v(" "),t("p",[e._v("And enable it in your "),t("code",[e._v("build.sbt")]),e._v(" file:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[e._v("enablePlugins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CalibanPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h3",{attrs:{id:"from-a-schema-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-a-schema-file"}},[e._v("#")]),e._v(" From a schema file")]),e._v(" "),t("p",[e._v("At this point, the "),t("code",[e._v("caliban")]),e._v(" command will cause any files in "),t("code",[e._v("src/main/graphql")]),e._v(" to be translated into a Caliban-generated client library. This happens automatically any time you "),t("code",[e._v("compile")]),e._v(".")]),e._v(" "),t("p",[e._v("By default, all clients are generated with the same client name as the source file, in the "),t("code",[e._v("caliban")]),e._v(" top-level package.")]),e._v(" "),t("p",[e._v("In order to supply more configuration options to the code generator, you can use the "),t("code",[e._v("calibanSettings")]),e._v(" sbt setting, combined with the "),t("code",[e._v("calibanSetting")]),e._v(" function to scope the settings to a particular file:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[e._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// The `file("Service.graphql")` is a path suffix for some file in `src/main/graphql`')]),e._v("\n      Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" caliban "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" calibanSettings "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" calibanSetting"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Service.graphql"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        cs "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("=>")]),e._v("\n          cs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("packageName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.example.graphql.client"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("scalarMapping"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n              "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"LanguageCode"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.example.models.LanguageCode"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("scalarMapping"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n              "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Timestamp"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"java.sql.Timestamp"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n              "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"DayOfWeek"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"java.time.DayOfWeek"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n              "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"IntRange"')]),e._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.github.tminglei.slickpg.Range[Int]"')]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("imports"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.example.graphql.client.implicits._"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("The path where the generator will look for schemas can be customized by overriding the "),t("code",[e._v("calibanSources")]),e._v(" settings:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[e._v("Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" caliban "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" calibanSources "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"caliban"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("If you want to cherry-pick certain files yourself, you can override that as well with an explicit "),t("code",[e._v("caliban / sources")]),e._v(" entry:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[e._v("Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" caliban "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" List"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"caliban"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Service.graphql"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("For every entry in "),t("code",[e._v("calibanSettings")]),e._v(" for the same file, a separate client (or "),t("RouterLink",{attrs:{to:"/docs/schema.html#code-generation"}},[e._v("schema")]),e._v(", depending on the entry's "),t("code",[e._v("genType")]),e._v(" value) will be generated.")],1),e._v(" "),t("h3",{attrs:{id:"from-a-server-url"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-a-server-url"}},[e._v("#")]),e._v(" From a server URL")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("calibanSetting")]),e._v(" function also permits generating clients for supplied "),t("code",[e._v("url")]),e._v("'s:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[e._v("      Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" caliban "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" calibanSettings "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" calibanSetting"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://my-example-service/graphql"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        cs "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("=>")]),e._v("\n          cs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("clientName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ExampleServiceClient"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("packageName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.example.graphql.client"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("h3",{attrs:{id:"generation-settings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generation-settings"}},[e._v("#")]),e._v(" Generation settings")]),e._v(" "),t("p",[e._v("The settings available on the "),t("code",[e._v("cs")]),e._v(" ("),t("code",[e._v("CalibanSettings")]),e._v(") builder are:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("packageName")]),e._v(": The package in which the code will be generated (default: "),t("code",[e._v("caliban")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("scalafmtPath")]),e._v(": Path to a scalafmt config file (default: "),t("code",[e._v(".scalafmt.conf")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("genView")]),e._v(": If true, will generate a case class and helper method to select all fields on an object (default: "),t("code",[e._v("false")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("scalarMappings")]),e._v(": A mapping from GraphQL scalar types to JVM types, as unknown scalar types are represented as "),t("code",[e._v("String")]),e._v(" by default.")]),e._v(" "),t("li",[t("code",[e._v("imports")]),e._v(": A list of imports to be added at the top of the generated code.")]),e._v(" "),t("li",[t("code",[e._v("splitFiles")]),e._v(": Whether to split the generated code into multiple files (default: "),t("code",[e._v("false")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("enableFmt")]),e._v(": Enable code formatting with scalafmt (default: "),t("code",[e._v("true")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("extensibleEnums")]),e._v(": Generate a fallback case class for unknown enum values (default: "),t("code",[e._v("false")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("headers")]),e._v(" (only defined for "),t("code",[e._v("url")]),e._v(" settings): Supply extra headers when fetching the schema from a URL.")])]),e._v(" "),t("h3",{attrs:{id:"manual-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manual-generation"}},[e._v("#")]),e._v(" Manual generation")]),e._v(" "),t("p",[e._v("If you prefer to generate the client explicitly rather than automatically, you can use "),t("code",[e._v("calibanGenClient")]),e._v(" on the SBT CLI as follows:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("calibanGenClient schemaPath outputPath "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("--scalafmtPath path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("--headers name:value,name2:value2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("--genView "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("--scalarMappings gqlType:f.q.d.n.Type,gqlType2:f.q.d.n.Type2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("--imports a.b.c._,c.d.E"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("--splitFiles "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("--enableFmt "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("false"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# example")]),e._v("\ncalibanGenClient project/schema.graphql src/main/client/Client.scala --genView "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("  \n")])])]),t("p",[e._v("This command will generate a Scala file in "),t("code",[e._v("outputPath")]),e._v(" containing helper functions for all the types defined in the provided GraphQL schema defined at "),t("code",[e._v("schemaPath")]),e._v(".")]),e._v(" "),t("p",[e._v("If you need to disable generating clients from "),t("code",[e._v("src/main/graphql")]),e._v(", include "),t("code",[e._v("Compile / caliban / calibanGenerator := Seq.empty")]),e._v(" in your project settings.")]),e._v(" "),t("p",[e._v("The package of the generated code is derived from the folder of "),t("code",[e._v("outputPath")]),e._v(". This can be overridden by providing an alternative package with the "),t("code",[e._v("--packageName")]),e._v(" option.\nSimilarly, the generated object name is derived from "),t("code",[e._v("outputPath")]),e._v(" file name but can be overridden with the "),t("code",[e._v("--clientName")]),e._v(" option.")]),e._v(" "),t("p",[e._v("Other options are explained above.")]),e._v(" "),t("h2",{attrs:{id:"compiletimecalibanplugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiletimecalibanplugin"}},[e._v("#")]),e._v(" CompileTimeCalibanPlugin")]),e._v(" "),t("p",[e._v("As mentioned in the introduction of the "),t("a",{attrs:{href:"#code-generation"}},[e._v("Code Generation")]),e._v(' chapter, this "meta" plugin is actually made of two "concrete" sbt plugins, '),t("code",[e._v("CompileTimeCalibanServerPlugin")]),e._v(" and "),t("code",[e._v("CompileTimeCalibanClientPlugin")]),e._v(",\nthat you'll both need to configure in your project be able to generate your Caliban client code from your Caliban server code..")]),e._v(" "),t("p",[e._v("You can find a demo project using this plugin here: "),t("a",{attrs:{href:"https://github.com/guizmaii/poc_compile_time_caliban_client_generation",target:"_blank",rel:"noopener noreferrer"}},[e._v("Demo project"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("To generate the Caliban client code from you Caliban server code, you need to do two things:")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Tell to the plugin where your Caliban "),t("code",[e._v("GraphQL[R]")]),e._v(" instances for which you want to generate a client are and configure the client code generator."),t("br"),e._v("\nHow to configure this is explained in the following "),t("a",{attrs:{href:"#server-side-configuration"}},[e._v("Server side configuration")]),e._v(" chapter.")])]),e._v(" "),t("li",[t("p",[e._v("Tell to the plugin where you want to generate your client(s)."),t("br"),e._v("\nHow to configure this is explained in the following "),t("a",{attrs:{href:"#client-side-configuration"}},[e._v("Client side configuration")]),e._v(" chapter.")])])]),e._v(" "),t("h3",{attrs:{id:"server-side-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server-side-configuration"}},[e._v("#")]),e._v(" Server side configuration")]),e._v(" "),t("p",[e._v("First, you'll need to activate the "),t("code",[e._v("CompileTimeCalibanServerPlugin")]),e._v(" plugin in all the sbt modules of your project containing a "),t("code",[e._v("GraphQL[R]")]),e._v(" instance for which you want to generate a client.")]),e._v(" "),t("p",[e._v("Let's say you have an "),t("code",[e._v("api")]),e._v(" sbt module defined in your "),t("code",[e._v("build.sbt")]),e._v(" which contains your Caliban server code:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("lazy")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("val")]),e._v(" api "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n  project\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("enablePlugins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CompileTimeCalibanServerPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v('Now, you need to tell to the "server side" plugin where is your '),t("code",[e._v("GraphQL[R]")]),e._v(" instance for which you want to generate a client."),t("br"),e._v("\nThis "),t("code",[e._v("GraphQL[R]")]),e._v(" instance need to be "),t("code",[e._v("public")]),e._v(". If it's "),t("code",[e._v("private")]),e._v(" or "),t("code",[e._v("protected")]),e._v(", the plugin code generator will not have access to it and will fail.")]),e._v(" "),t("p",[e._v("Let's say you have an object "),t("code",[e._v("CalibanServer")]),e._v(" object in your "),t("code",[e._v("api")]),e._v(" sbt module:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("package")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("my"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("awesome"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("project"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("api")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("caliban"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")])]),e._v("GraphQL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("graphQL\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("caliban"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")])]),e._v("GraphQL\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("object")]),e._v(" CalibanServer "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("val")]),e._v(" graphqlApi"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" GraphQL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("MyEnv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" graphQL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Resolvers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("resolver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("You'll need to add in your sbt definition:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("lazy")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("val")]),e._v(" api "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n  project\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("enablePlugins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CompileTimeCalibanServerPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("settings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanServer "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanServerSettings "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n        Seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.example.my.awesome.project.api.CalibanServer.graphqlApi"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v(" ClientGenerationSettings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("default\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v('This is the minimal working configuration for the "server side".')]),e._v(" "),t("p",[e._v("Now, you may want to tweak how the client code is generated."),t("br"),e._v("\nFor that, you'll have to replace the "),t("code",[e._v("ClientGenerationSettings.default")]),e._v(" with the configuration that suits you the best."),t("br"),e._v("\nThis "),t("code",[e._v("ClientGenerationSettings")]),e._v(" case class gives you the following configuration options:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("packageName")]),e._v(": The package in which the code will be generated (default: "),t("code",[e._v("generated")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("clientName")]),e._v(": The name of the client class generated (default: "),t("code",[e._v("Client")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("scalafmtPath")]),e._v(": Path to a scalafmt config file (default: "),t("code",[e._v(".scalafmt.conf")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("genView")]),e._v(": If true, will generate a case class and helper method to select all fields on an object (default: "),t("code",[e._v("false")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("scalarMappings")]),e._v(": A mapping from GraphQL scalar types to JVM types, as unknown scalar types are represented as "),t("code",[e._v("String")]),e._v(" by default.")]),e._v(" "),t("li",[t("code",[e._v("imports")]),e._v(": A list of imports to be added at the top of the generated code.")]),e._v(" "),t("li",[t("code",[e._v("splitFiles")]),e._v(": Whether to split the generated code into multiple files (default: "),t("code",[e._v("false")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("enableFmt")]),e._v(": Enable code formatting with scalafmt (default: "),t("code",[e._v("true")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("extensibleEnums")]),e._v(": Generate a fallback case class for unknown enum values (default: "),t("code",[e._v("false")]),e._v(").")])]),e._v(" "),t("p",[e._v("Let's take an example:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("lazy")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("val")]),e._v(" api "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n  project\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("enablePlugins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CompileTimeCalibanServerPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("settings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanServer "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanServerSettings "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n        Seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.example.my.awesome.project.api.CalibanServer.graphqlApi"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v("\n            ClientGenerationSettings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n              packageName "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"com.example.my.awesome.project.client.generated"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n              clientName "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"CalibanClient"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n              splitFiles "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v('That\'s all. You now know how to configure the "server side" of this plugin.'),t("br"),e._v('\nLet\'s now see how to configure the "client side".')]),e._v(" "),t("h3",{attrs:{id:"client-side-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#client-side-configuration"}},[e._v("#")]),e._v(" Client side configuration")]),e._v(" "),t("p",[e._v('The "client side" of this plugin is here to help you define where your Caliban client code is generated.')]),e._v(" "),t("p",[e._v("The first thing to do is to activate the "),t("code",[e._v("CompileTimeCalibanClientPlugin")]),e._v(" in the sbt module where you want your Caliban client code to be generated into.")]),e._v(" "),t("p",[e._v("Let's say you have a "),t("code",[e._v("client")]),e._v(" sbt module defined in your "),t("code",[e._v("build.sbt")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("lazy")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("val")]),e._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n  project\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("enablePlugins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CompileTimeCalibanClientPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("You only have one thing left to do."),t("br"),e._v('\nYou need to reference your "server side" sbt module (here '),t("code",[e._v("api")]),e._v(') in your "client side" sbt module (here '),t("code",[e._v("client")]),e._v(") definition so the plugin knows that you want to generate the Caliban client code for your "),t("code",[e._v("api")]),e._v(" server\nin this "),t("code",[e._v("client")]),e._v(" sbt module:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("lazy")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("val")]),e._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n  project\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("enablePlugins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CompileTimeCalibanClientPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("settings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanClient "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanClientsSettings "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("api"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v('This is the minimal working configuration for the "client side".')]),e._v(" "),t("p",[e._v("By default, the Caliban client code will be generated in your "),t("code",[e._v("src/main/scala")]),e._v(" directory of your "),t("code",[e._v("client")]),e._v(" sbt module."),t("br"),e._v("\nYou may prefer it not to be generated inside your - usually versioned-in-git - module code.\nFor that, the plugin provides an option to generate the code in the "),t("code",[e._v("target")]),e._v(" directory instead:")]),e._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("lazy")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("val")]),e._v(" client "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n  project\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("enablePlugins"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CompileTimeCalibanClientPlugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("settings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanClient "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanClientsSettings "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Seq"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("api"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      Compile "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanClient "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" ctCalibanClientsVersionedCode "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// By default, it's true.")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),t("p",[e._v("You're done. 🎉"),t("br"),e._v("\nYou can now reload your sbt config and recompile your project. Your Caliban client code will be generated during the compilation process.")]),e._v(" "),t("h3",{attrs:{id:"additional-information-about-compiletimecalibanplugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#additional-information-about-compiletimecalibanplugin"}},[e._v("#")]),e._v(" Additional information about CompileTimeCalibanPlugin")]),e._v(" "),t("p",[e._v("As you may have seen in the "),t("a",{attrs:{href:"https://github.com/guizmaii/poc_compile_time_caliban_client_generation",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo project"),t("OutboundLink")],1),e._v(", you can have more complex configurations for this plugin."),t("br"),e._v("\nYou can have more than one "),t("code",[e._v("GraphQL[R]")]),e._v(" instance per server. Each "),t("code",[e._v("GraphQL[R]")]),e._v(" instance can have its own client code generation configuration."),t("br"),e._v('\nYou can also have multiple "servers" referenced in your "client" module. The plugin will generate all the clients for all the "servers" referenced in your sbt definition.')])])}),[],!1,null,null,null);a.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{298:function(a,t,s){"use strict";s.r(t);var e=s(13),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"validation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validation"}},[a._v("#")]),a._v(" Validation")]),a._v(" "),t("p",[a._v("Caliban provides a little macro called "),t("code",[a._v("gqldoc")]),a._v(" that can check at "),t("strong",[a._v("compile-time")]),a._v(" that a GraphQL query (a "),t("em",[a._v("document")]),a._v(" to be exact) has valid syntax.")]),a._v(" "),t("div",{staticClass:"language-scala mdoc:silent extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("caliban"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Macros"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("gqldoc\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" query "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" gqldoc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[a._v('"""\n  query test {\n    amos: character(name: "Amos Burton") {\n      name\n    }\n  }"""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("p",[a._v("At "),t("strong",[a._v("runtime")]),a._v(", it is possible to validate a query against your schema by calling the method "),t("code",[a._v("check")]),a._v(" on your API.")]),a._v(" "),t("div",{staticClass:"language-scala extra-class"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" check"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("query"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" IO"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("CalibanError"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Unit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("It is also possible to skip validation when executing a query by passing "),t("code",[a._v("skipValidation = true")]),a._v(" when calling "),t("code",[a._v("execute")]),a._v(" (also available in the adapters). This will slightly improve performance.")])])}),[],!1,null,null,null);t.default=n.exports}}]);
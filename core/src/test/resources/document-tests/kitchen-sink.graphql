directive @mydirective(input: MyDirectiveInput!) on SCHEMA
directive @key(fields: String!) on OBJECT | INTERFACE
directive @shareable on UNION
directive @tag on OBJECT | FIELD_DEFINITION | INTERFACE | UNION | ENUM | INPUT_OBJECT

schema @mydirective(input: {name: "test"}) {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

union Event @shareable = AgeChanged | NameChanged | RegistrationChanged

input MyDirectiveInput {
  name: String!
}

input MyInput {
  name: String!
  age: Int = 18
  registered: Boolean
  friends: [String]!
}

interface Node {
  id: ID! @deprecated(reason: "Use `uuid` instead")
}

interface User @tag {
  name: String!
  age: Int!
  registered: Boolean!
  friends: [User!]!
  bestFriend: User
  friendsCount: Int!
}

type AgeChanged {
  age: Int!
}

type Me implements User & Node @key(fields: "id") {
  id: ID!
  name: String!
  age: Int!
  registered: Boolean!
  friends: [User!]!
  bestFriend: User
  friendsCount: Int!
}

type Mutation @tag {
  goodbye(input: MyInput! = {name: "test"} @deprecated(reason: "Bad")): String @tag
}

type NameChanged {
  name: String!
}

type Query {
  hello(name: String! = " world", after: Int): User!
}

type RegistrationChanged {
  registered: Boolean!
}

type Subscription {
  event: Event!
}